#!/usr/bin/env ruby

# Turn on verbose to make sure we not generating any ruby warning
$VERBOSE = true

# So our "did they run the rspec command?" detection logic thinks
# that we run `rspec`.
$0 = "rspec"

# For the monorepo build the bundle directory is at the top level
$:.unshift File.expand_path '../../../bundle', __FILE__

require 'bundler/setup'

# To use simplecov while running rspec-core's test suite, we must
# load simplecov _before_ loading any of rspec-core's files.
# So, this executable exists purely as a wrapper script that
# first loads simplecov, and then loads rspec.
begin
  # Simplecov emits some ruby warnings when loaded, so silence them.
  old_verbose, $VERBOSE = $VERBOSE, false

  unless ENV['NO_COVERAGE'] || RUBY_VERSION.to_f < 2.1
    require 'simplecov'

    SimpleCov.start do
      root File.expand_path("../..", __FILE__)
      add_filter %r{/bundle/}
      add_filter %r{/tmp/}
      add_filter %r{/spec/}

      # SimpleCov has limitations tracking coverage in forked processes.
      # While we attempt to capture coverage from workers (see parallel_runner.rb),
      # it's not fully reliable due to timing and file locking issues.
      # Exclude fork-heavy files from coverage requirements to avoid flaky failures.
      add_filter %r{/lib/rspec/core/parallel_runner\.rb}
      add_filter %r{/lib/rspec/core/parallel/}
      add_filter %r{/lib/rspec/core/bisect/fork_runner\.rb}
      add_filter %r{/lib/rspec/core/bisect/shell_runner\.rb}

      minimum_coverage(100)

      # Enable branch coverage to track conditional execution paths
      enable_coverage :branch

      # Enable result merging to combine coverage from multiple test runs
      use_merging true
      merge_timeout 30 # Allow 30 seconds for merging results

      # Use consistent command name so all processes contribute to same report
      command_name "RSpec"
    end
  end
rescue LoadError # rubocop:disable Lint/SuppressedException
ensure
  $VERBOSE = old_verbose
end

load File.expand_path("../../exe/rspec", __FILE__)
